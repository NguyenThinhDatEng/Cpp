#define
	CRT_SECURE_NO_WARNINGS
	NULL 0

iostream
	exit(0)					//stop
			// if an error occurs when taking the input from cin
			//an error flag is set and future attempts to get input will fail
	cin.clear();	// to get rid of the error flag
-			
	cin.fail()				// Enter the wrong data type
	cin.ignore()				// delete a character in buffer
	cin.ignore(32767, '\n');		
	system("cls")				// clear screen
	system("pause")				// stop program
	typeid(var :type_data).name();			>> return type data of var
E.g.		typeid(&iVar).name() = int *
		typeid(array).name() = int [numberOfElements]
algorithm
	sort
array
	type_data: array <type_data, numberOfElements> <name_arr> = {...};
	at(ndexOfElement): element						// throw an errol, then stop program (safer arr[index]);
	size(): int
	begin();
	end();
	sort(beginElement, endElement);						
		sort(arr.begin(), arr.end());					// increase sort
		sort(arr.rbegin(), arr.rend());					// decrease sort
	
cstring
	str :String || char[]

	strlen(str): int
	strlwr(str): void
	strupr(str): void
	strcpy(destStr, str);				// report error after complie
	strcpy(destStr, 3, str);			// report error before complie
	strcat(destStr, str);				// concatenated string
							~ strcat_s
	strcmp(str1, str2);				// compare 2 str by alphabet
							// s1 < s2 (<0)
	strstr(str, needToFindString): NULL || !NULL
cstdlib
	void srand(unsigned int seed);		// seed khác nhau >> bộ số ngẫu nhiên khác nhau
						// seed giống nhau >> cùng một kết quả
	rand(): int				// 0 - 32767 (RAND_MAX)
						// rand() % mien_gioi_han + 1 (1 - 10)
ctime
	time(NULL)				>> return real time of system

iomanip						// manipulator (thao tác)
	fixed						// nói rằng sẽ có một số chữ số thập phân cố định sau dấu thập phân
	setpercision(number_of_decimals :int)		// độ chính xác tối thiểu
	setw(character width :int)
		cout << setw(5) << left << ...; 	//aligns the left
		cout << setw(20) << right << ...;	//aligns the right
	setfill(charater_default :char)			// change character default when use setw
		cout << setfill('.');		// use . instead of ' '

random
	random_device rd;				// is a type data
							// to take a seed
	mt19937	rng(rd());				~ mt19937_64
	uniform_int_distribution<int> uni(min, max)
	
	auto <name_variable> = uni(rng);		// automatically change to match type data for n
							// avoid overflow

string
	getline(cin, str :string);		// the default ends with '\n'
	getline(cin, str, ch :char);		// ends with ch
	length();
	size();

vector
	at(index): return element at index