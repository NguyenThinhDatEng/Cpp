							BASICS
<< 			// insertion operator
>>			// extraction operator
cout			// use default cout percision of 6
<< endl;		>> auto delete buffer 
<< "\n" << flush;	>> delete buffer by user (ENCOURAGE)
typeid(variable).name()	>> type of variable
input/output systems
	binary system		bin
	octal system		oct
	decimals system		dec
	hexadecimal system	hex
	cin >> name_system >> var;
E.g.		cin >> hex >> n;
	cout << name_system << var;

just declare 	>> system save this in stack memory
delete (in C++) >> trao lại vùng nhớ cho HĐH
								auto
automatically accepts the data type based on 
1, the variable being initialized
E.g.
	auto var = 1;	// int
	auto d { 5.0 }; // d will be type double

2, type_return of function
E.g.
	auto sum(int a, int b)
	{
		return a + b;	// int
	}
*** declare function
auto <name_function>(..) -> <type_reuturn>;
3, the values of parameters
E.g.
	auto maxval(auto x, auto y){
		return (x > y) ? x : y;
	}
	double d = maxval(6.34, 18.523); // returns 18.523
	char ch = maxval('a', '6'); 	// returns 'a'
								Function templates
syntax: template <parameter-list> function-declaration
E.g.
	#include<iostream>
	using namespace std;
	template <typename T>

	T maxval(T x, T y){
		return (x > y) ? x : y;
	}
							Function pointer
E.g.
	int foo(){
		return 0;
	}
	int main(){
		int n = foo();
		return 0;
	}
When the main function runs to the command line that calls the foo function, 
the operating system will find the address of the foo function on the virtual memory 
and pass the code of the foo function to the CPU to continue processing.

syntax: <return_type> (*<name_of_ptr>) (<data_type_of_parameters>);
E.g.1
	int foo(){return 0}
	int (*pFoo)();
E.g.2
	void swapValue(int &v1, int &v2);
	void (*pSwap) (int &, int &);
E.g.3
	bool ascending(int left, int right){
		return left > right;
	}
	bool descending(int left, int right){
		return left < right;
	}
	void selectionSort(int *arr, int length, bool (*comparisonFunc)(int, int)){}



							Default parameter
E.g.	void MyDelay(long Loops = 100)
		statements
	}
	MyDelay(); 	// Loops = 100;
	MyDelay(200); 	// Loops = 200;
=> the number of arguments in the function call may be less than parameter definition
Note:
	int MyFunc(int a = 1, int b, int c = 3, int d = 4); // ✖
	int MyFunc(int a, int b = 2, int c = 3, int d = 4); // ✔
							Operator overloadingsyn
syntax: data_type "operator" operator_symbol (parameters) {
		...
	}
E.g.	SP operator + (SP C1,SP C2) { 
		SP tmp; 
		tmp.real = C1.real + C2.real; 
		tmp.img = C1.img + C2.img; 
		return tmp; 
	}
	main()
	{
		C3 = C2 + C1;
	} 				
Note:
	New operators cannot be defined
		::
		.* access to pointer (struct, class, ...)
		.  access to field of (struct, class, ...)
		?: conditional operator
		sizeof
	Cann't have parameters with default parameter
							
							Overloading
E.g. 	int abs(int i);
	double abs(double d);
	long abs(long l);
							Function return
*** value
	normal
avoid: array, struct, class
should: return variables are declared in the function
*** address "*"
E.g.	int* abc(){
		int *ptr;
		return &var;
		return ptr;
	}
	
	int* allocate_mem(){
		return new int[10];

should: return the address of allocation area
		objects are passed as address
avoid: return variables are declared in the function
		class, struct, array

*** reference "&"
E.g.	int& getElement(int *a, int idx){
		return a[idx];
	}
	
							NULL
= nullptr
							Pass to function
*** pass the address to the function
	void funtion(int* ptr) {}
	int var;
	function(&var);
=> used for Array
	int *p = &var;
	function(p);
=> ptr is a copy of p (Both p and ptr point to memory area of var)
			ptr can't change the value of p (is the address of var)
			ptr can set the value of var
*** pass the reference to the function
	void function(int* &ptr){}
	int *p;
	function(p)
=> ptr and p are one. 

							Vector
*** initialize
	vector<type_data> <name_array> {};
		vector<int> arr {1, 2, 3};
*** At
	arr[i]					// not check the range
	arr.at(i)				// check
*** Size
	arr.size();
*** Resize
	arr.resize(new_size: int)		// change size of arr
*** capacity
	arr.capacity(): int			// returns the largest number of elements in the array since the declaration
*** Like stack
	vector<int> stack;
	stack.push_back(element);		// add a new element to the end vector
	stack.pop_back();			// delete the end element of vector
	stack.back(): element			// return the end element of vector

							Type (a new type_data)
INT
DOUBLE
							Reference variables
&
	<type_data> &ref = var;
		int &ref = value;
>> bí danh
							Pointer and const
pointer const
	<type_data> *const ptr = &abc;
						>> can change the value of *ptr
						>> can't change the address of ptr
const pointer
	const <type_data> ptr = &abc;
						>> can't change the value of *ptr						
						>> can change the address of ptr
const pointer const	
						>> can't change the address of ptr
						>> can't change the value of *ptr
							Dynamic memory allocation
NEW
*** a value
	<type_data> *ptr = new <type_data>;
	<type_data> *ptr = new <type_data>(element);
Note: Cẩn thận rò rỉ bộ nhớ
*** an array
	<type_data> *arr = new <type_data>[numberOfElements];
	<type_data> *arr = new <type_data>[numberOfElements] {};
DELETE
	delete ptr;
	delete[] arr;
	
							Pointers
NULL pointers
*** declare
	1. type_data *p{ 0 };
	2. type_data *p1; => garbage pointer
	   >> *p1 = 0	=> NULL pointer		~ false
	3. type_data *p = nullptr;
With Array
*** address
int arr[2] {};
arr = &arr = &arr[0];
 
							foreach
for (int &var : arr)
{
	cout << var << arr;
}
>> pass by reference
						
							array
array libary
	array <type_data, numberOfElements> <name_arr> = {...};
	

#defint MAX 5
*** initialize array 1D
int a[2] = {1, 2};	// 1 2
int a[] = {1,3};	// 1 3
int a[2] {3}		// 3 0
int a[MAX] {1,3}	// 1 3 0 0 0
*** Passing arrays to functions
<type_return> <name_function>	(int a[numberOfElements]) {}
				(int a[]) {}
				(int *a) {}

<type_return> <name_function>	(int a[][numberOfColumbs]){}
				(int (*a)[numberOfColumbs]){}
*** character array
C-style: char <name_array>[numberOfCharacter];
std::string:
	cin.getline(name_array, numberOfCharacter + 1); 
							continue
to jump to end of loop body
							check
if (cin.fail())
{
	cin.clear();
	cin.ignore();
}	
							goto(avoid)
goto <name_label>;
Create a label:
	<name_label>:
	E.g.
		label1:
			cout << "123";
		goto label;
		goto label1;
		label:
			cout << "abc";
							switch
switch(expression) {
case:
	declare variable;
	statements
	break;
case:
{
	initialize variable;		E.g. int var = 1;
	statements
	break;
}
default:
	statements
	break;
}

for each (object var in collection_to_loop)
{
	
}
try 
{

}
catch (const std::exception&)
{
	throw
}
							Forward declaration
with any variable <primitive type>	extern		>< define
	extern int iValue;
=> Complier does not need to allocate memory

							PASSING
Parameter
	showIntN(int n) {
		cout << n;
	}
	=>>> parameter is n;

	showIntN(int &n) {
		cout << n;
	}
	=>>> parameter is a reference;

	showIntN(const int &n) {
		cout << n;
	}
	=>>> parameter is a const reference is n;
Argument
	showIntN(n);
	=>>> this caller function has an argument is n;
Passing arguments by value		MAKE A ONE COPY
					should not be used with Array, Struct, Class
Pass by reference			&
	Pass by const reference		should not be used with int, float, double, ...

				

							VARIABLE
TYPE
	local varible
	static variable		s_var
		E.g. generate ID (funtion)
	global variable		g_var

CONVERSION
	*** Implicit type conversion
	long double (highest) > double > float > unsigned long long > long long > unsigned long > long > unsigned int > int (lowest)
	Nếu các toán hạng là một số nguyên có miền giá trị nhỏ hơn kiểu int (bool, char, short)
	=> toán hạng sẽ automatically chuyển về int hoặc unsigned int
	
	*** Explicit type conversion
	Nếu các toán hạng trong một biểu thức có miền giá trị khác nhau, các toán hạng tự động chuyển kiểu dữ liệu giống toán hạng
	có miền giá trị lớn nhất
	E.g.
		double d = 1.0/2;
	
		int a;
		int b;
		double = a / b * 1.0;
	1. C-style cast
	(type_data)var;
	type_data(var) / var1;
	2. static_cast
	static_cast<type_data> expression
	static_cast<type_data>(var)


pressing
	static_cast<type_data>

initialization types
	int a = 1;	//copy initialization
	int a(2);	//direct initialization
	int a{3};	//uniform initialization
bool
	cout << std::boolalpha
		cout << true << endl;	// true
		cout << flase << endl;	// flase
	cout << std::noboolalpha
		cout << true << endl;	// 1
		cout << flase << endl;	// 0

initializations of floating point numbers
	float a = 0.4f;
	double b = 0.4;
	double c{ 69000.0}	~ double c(6.9e4)
	double d(0.00069)	~ double d{6.9E - 4}

	cout << std::setpercision(number_of_decimals);
	cout << ...;
rounding error in floating point numbers
	double d1 = 1.0;
	double d2{0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1}
	cout << std::setpercision(number_of_decimals);
	cout << d1 << endl;	// 1.0
	cout << d2;		// 0.9999999999999999878

							NOTE
Don't compare two floating point numbers
always use "()" when employ logical operator(NOT, AND, OR)
Buffer
	// When any information is entered from the keyboard, that information will be buffered
	int n;
	cin >> n;	=> Suppose to type 1 and enter
	// Here type 1 and enter, instantly 1 and enter is buffered
	// the buffer contains two characters 1 và "\n"
	string str;
	// when encounter "\n" getline will automatically get all the data in the cache and to save it to str
	getline(cin, str);
	// but when finished importing n and type enter so n only give 1 => only enter in the cache
	=> getline is called, lấy hết trong bộ nhớ đệm ra, encounter enter => nó nghĩ đã kết thúc chuỗi dữ liệu vừa nhập rồi => bộ nhớ đệm k còn j hết
